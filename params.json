{"name":"Html-object","tagline":"A simple way to programmatically create HTML structures or individual elements.","body":"## Installation\r\nUsing npm, simply run:\r\n\r\n`npm install html-object --save`\r\n\r\n## Usage\r\nUsage is pretty straight-forward. Simply instantiate a new `HtmlObject` and start creating awesome-sauce.\r\n\r\n```js\r\nvar HtmlObject = require('html-object') // Require HtmlObject\r\n  , list = new HtmlObject('ul');        // Create a new instance.\r\n\r\n// Add some children\r\nlist.spawnChild('li').addClass('list-item').setContent('I am an item!');\r\nlist.spawnChild('li').addClass('list-item').setContent('And so am I!');\r\nlist.spawnChild('li').addClass('list-item').setContent('Look at us being sassy!');\r\n\r\n// Now let's get some output.\r\nconsole.log(list.render());\r\n\r\n// <ul><li class=\"list-item\">I am an item!</li><li class=\"list-item\">And so am I!</li><li class=\"list-item\">Look at us being sassy!</li></ul>\r\n```\r\n\r\n## Interface\r\n\r\n### Class HtmlObject\r\n\r\n#### HtmlObject(tag, attributes)\r\n*An HtmlObject that renders to markup.*\r\n\r\n#### Parameters\r\n\r\n**[tag]**: *string*, The tag for the new element. E.g. \"div\" or \"span\".\r\n\r\n**[attributes]**: *Object*, An object of attributes. E.g. {id:\"myId\"}\r\n\r\n### Methods\r\n\r\n#### setIsVoid(isVoid)\r\n*Set if this element is void. This is useful for custom elements that you think should be void (think angularjs).*\r\n\r\n##### Parameters\r\n\r\n**isVoid**:  *boolean*,  Boolean indicating if this element should, or should not be void.\r\n\r\n##### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### isVoidElement([tag])\r\n*Returns whether or not this element's, or the supplied tag is void.*\r\n\r\n#### Parameters\r\n\r\n**[tag]**:  *string*,  The tag you wish to check is void.\r\n\r\n#### Returns\r\n\r\n*boolean*,  If this element, or the supplied tag is considered void.\r\n\r\n***\r\n\r\n#### isXhtml()\r\n*Returns whether or not this element is void*\r\n\r\n\r\n#### Returns\r\n\r\n*boolean*,  If this element is Xhtml\r\n\r\n***\r\n\r\n#### setIsXhtml(boolean)\r\n*Set whether or not this element is Xhtml.*\r\n\r\n\r\n#### Parameters\r\n\r\n**boolean**:  *boolean*,  True to set to xhtml, false to set to html x.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### getTag()\r\n*Get this element's tag name*\r\n\r\n\r\n#### Returns\r\n\r\n*string*,  The tag of this element\r\n\r\n***\r\n\r\n#### removeAttribute(attribute)\r\n*Remove a specific attribute.*\r\n\r\n\r\n#### Parameters\r\n\r\n**attribute**:  *string*,  The name of the attribute to remove.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### getAttributes()\r\n*Get this element's attributes.*\r\n\r\n\r\n#### Returns\r\n\r\n*Object*,  The element's attributes.\r\n\r\n***\r\n\r\n#### getAttribute(attribute)\r\n*Get a specific attribute.*\r\n\r\n\r\n#### Parameters\r\n\r\n**attribute**:  *string*,  The name of the attribute you wish to get.\r\n\r\n#### Returns\r\n\r\n*string|null*,  The value of the attribute, or null when not set.\r\n\r\n***\r\n\r\n#### setAttributes(attributes)\r\n*Set (and overwrite) the attributes.*\r\n\r\n\r\n#### Parameters\r\n\r\n**attributes**:  *Object*,  An object of attributes to set.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### addAttributes(attributes)\r\n*Add multiple attributes.*\r\n\r\n\r\n#### Parameters\r\n\r\n**attributes**:  *Object*,  An object of attributes to add.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### setAttribute(attribute, value)\r\n*Set a specific attribute.*\r\n\r\n\r\n#### Parameters\r\n\r\n**attribute**:  *string*,  The name of the attribute you wish to set.\r\n\r\n**value**:  *string*,  The value of the attribute.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### setAppendContent()\r\n*Set content placement to \"append\".*\r\nthis will append the content to the body _after_ the child elements.\r\n\r\n\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### setPrependContent()\r\n*Set content placement to \"prepend\".*\r\nthis will prepend the content to the body _before_ the child elements.\r\n\r\n\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### addClasses(classes)\r\n*Convenience method. Add an array of multiple classes at once.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**classes**:  *Array*,  The classes to add.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### addClass(className)\r\n*Convenience method. Add a class to the element.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**className**:  *string*,  The class to add.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### removeClass(className)\r\n*Convenience method. Remove a class from the element.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**className**:  *string*,  The class to remove.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### setContent(content)\r\nSet (and overwrite) content.\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**content**:  *string*,  The content to set\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### appendContent(content)\r\n*Add (append) content.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**content**:  *string*,  The content to append to the existing content.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### prependContent(content)\r\n*Add (prepend) content.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**content**:  *string*,  The content to prepend to the existing content.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### clearContent()\r\n*Clear (remove) the content.*\r\n\r\n\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### renderAttributes()\r\n*Render the attributes to a string.*\r\n\r\n\r\n\r\n#### Returns\r\n\r\n*string*,  A rendered string of attributes.\r\n\r\n***\r\n\r\n#### setData(key, value)\r\n*Convenience method. Set data-something.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**key**:  *string*,  The key for the data attribute you wish to set\r\n\r\n**value**:  *string*,  The value to set for key.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### getData(key)\r\n*Convenience method. Get data-something.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**key**:  *string*,  The key for the data attribute you wish to get.\r\n\r\n#### Returns\r\n\r\n*string*,  The value of the data attribute.\r\n\r\n***\r\n\r\n#### data(key, [value])\r\n*Convenience method. jQuery-like syntax for data.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**key**:  *string*,  The key for which you wish to get or set the value.\r\n\r\n**[value]**:  *string*,  The value to set for key.\r\n\r\n#### Returns\r\n\r\n*HtmlObject|string*,  Fluent interface, or data value on get.\r\n\r\n***\r\n\r\n#### removeData(key)\r\n*Convenience method. Remove data-something.*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**key**:  *string*,  Remove the data-something value.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### renderChildren()\r\n*Render the children for this element.*\r\n\r\n\r\n\r\n#### Returns\r\n\r\n*string*,  The rendered string.\r\n\r\n***\r\n\r\n#### addChild(child)\r\n*Add a child to this element*\r\n\r\n\r\n\r\n\r\n#### Parameters\r\n\r\n**child**:  *HtmlObject*,  The child instance.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface\r\n\r\n***\r\n\r\n#### spawnChild([tag], [attributes])\r\n*Spawn a new child for this element.*\r\n\r\n#### Parameters\r\n\r\n**[tag]**:  *string*,  The tag for the child element.\r\n\r\n**[attributes]**:  *Object*,  An object of properties for the child element.\r\n\r\n#### Returns\r\n\r\n*HtmlObject*,  Fluent interface} The child element\r\n\r\n***\r\n#### render()\r\n*Render this element.*\r\n\r\n\r\n#### Returns\r\n\r\n*string*,  The rendered output.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}